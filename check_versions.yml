---
- name: Check Installed Software Versions
  hosts: localhost
  become: no
  vars_files:
    - vars.yml

  tasks:
    - name: Run Version Commands
      command: "{{ item.cmd }}"
      register: version_check
      ignore_errors: yes
      changed_when: false
      loop:
        - { name: "Rust", cmd: "rustc --version", expected: "Rust {{ rust_version }}" }
        - { name: "Google Chrome", cmd: "google-chrome --version", expected: "{{ chrome_version }}" }
        - { name: "Node.js", cmd: "node -v", expected: "v{{ node_version }}" }
        - { name: "Docker", cmd: "docker --version", expected: "{{ docker_version }}" }
        - { name: "kubectl", cmd: "kubectl version --client", expected: "{{ kubectl_version }}" }
        - { name: "Helm", cmd: "helm version --short", expected: "{{ helm_version }}" }
        - { name: "Azure CLI", cmd: "az --version", expected: "{{ azure_cli_version }}" }
        - { name: "Kind", cmd: "kind version", expected: "{{ kind_version }}" }
        - { name: "Python", cmd: "python3 --version", expected: "Python 3.x.x" }

    - name: Display Installed Versions (Icon-based Output)
      ansible.builtin.debug:
        msg: |
          {{ item.item.name }}: {{ status }}
      loop: "{{ version_check.results }}"
      vars:
        installed_version: "{{ item.stdout | trim if item.rc == 0 else 'Not Installed' }}"
        status: >-
          {%- if item.rc != 0 -%}
            ❌ Not Installed (Expected: {{ item.item.expected }})
          {%- elif installed_version != item.item.expected -%}
            ⚠️ Installed (Different: {{ installed_version }}, Expected: {{ item.item.expected }})
          {%- else -%}
            ✅ Installed ({{ installed_version }})
          {%- endif -%}
      loop_control:
        label: "{{ item.item.name }}"
